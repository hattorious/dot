# ~/.tmux.conf - tmux terminal multiplexer config

# Use the OS X pasteboard hack if available
if-shell 'command -v reattach-to-user-namespace >/dev/null' \
    'set -gq @osx-pasteboard 1'

if-shell -F '#{@osx-pasteboard}' \
    'set -g default-command "reattach-to-user-namespace -l $SHELL"'

# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# use UTF8
set -g status-utf8 on
set -g utf8
set-window-option -g utf8 on

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Create splits and vertical splits
bind-key | split-window -h -p 50 -c "#{pane_current_path}"
bind-key - split-window -p 50 -c "#{pane_current_path}"

# temp shell split: 
# I like to have quick access to a shell split from vim, etc.
# if the window is zoomed, unzoom it
# else create a new split
bind-key _ if-shell -F '#{window_zoomed_flag}' \
    'resize-pane -Z' \
    'split-window -l 7 -c "#{pane_current_path}"'
bind-key h select-pane -l \; resize-pane -Z

# Pane resize in all four directions using vi bindings.
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Use vi keybindings for tmux commandline input.
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# Make copy mode more vim-like.
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-selection
bind-key -t vi-copy C-v rectangle-toggle

# Copy top of tmux paste buffer stack to OS clipboard.
# Alternatively, this will always immediately copy to system pasteboard:
if-shell -F '#{@osx-pasteboard}' \
    'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1

# renumber remaing windows on close
set-option -g renumber-windows on

# color scheme (solorized dark)
# SOLARIZED HEX      TERMCOL  XTERM/HEX
# --------- -------  -------  -----------
# base03    #002b36  brblack  234 #1c1c1c
# base02    #073642  black    235 #262626
# base01    #586e75  brgreen  240 #585858
# base00    #657b83  bryellow 241 #626262
# base0     #839496  brblue   244 #808080
# base1     #93a1a1  brcyan   245 #8a8a8a
# base2     #eee8d5  white    254 #e4e4e4
# base3     #fdf6e3  brwhite  230 #ffffd7
# yellow    #b58900  yellow   136 #af8700
# orange    #cb4b16  brred    166 #d75f00
# red       #dc322f  red      160 #d70000
# magenta   #d33682  magenta  125 #af005f
# violet    #6c71c4  brmagenta 61 #5f5faf
# blue      #268bd2  blue      33 #0087ff
# cyan      #2aa198  cyan      37 #00afaf
# green     #859900  green     64 #5f8700
set -g status-left-length 54
set -g status-right-length 451
set -g status-bg "#1c1c1c" # base03
set -g status-fg "#808080" # base0
set -g pane-border-fg "#808080" # base0
set -g pane-active-border-fg "#00afaf" # cyan
set -g message-fg "#5f5faf"
set -g message-bg "#1c1c1c"
set -g status-left ' ⧉  #[bold]#S  #[fg=#585858,nobold]  '
set -g status-right "#[fg=#585858]$USER@#h #[fg=#8a8a8a,bold]%l:%M %p "
set -g window-status-format "#[bold] #I#[nobold]: #W  #[fg=#585858]"
set -g window-status-current-format "#[fg=#e4e4e4,bg=#585858]   #W   "

# Screen like binding
unbind C-b
set -g prefix C-a
bind a send-prefix

# No escape time for vi mode
set -sg escape-time 0

# Screen like binding for last window
unbind l
bind C-a last-window

# Bigger history
set -g history-limit 10000

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Adding pane pop-out and pop-in
# You can use window zoom for this but I wanted to try to implement it using user options.
unbind Up
bind Up run-shell 'tmux new-window -d -n tmp-#{window_index}-#{pane_index}' \;\
    run-shell 'tmux set-window-option -t tmp-#{window_index}-#{pane_index} @tmp-pop-out-source #{window_index}.#{pane_index}' \;\
    run-shell 'tmux swap-pane -s #{session_name}:#{window_index}.#{pane_index} -t #{session_name}:tmp-#{window_index}-#{pane_index}.1' \;\
    run-shell 'tmux select-window -t #{session_name}:tmp-#{window_index}-#{pane_index}'
unbind Down
bind Down run-shell 'tmux swap-pane -t #{@tmp-pop-out-source}' \;\
    run-shell 'tmux select-window -t #{session_name}:#{@tmp-pop-out-source}' \;\
    run-shell 'tmux kill-window -t #{session_name}:tmp-#{window_index}-#{pane_index}'

# remap kill window, add confirm map before killing server
unbind &
bind-key Q confirm kill-window
bind-key X confirm kill-server

# remap rename session
unbind ,
bind-key , command-prompt -p "rename session:" "rename-session '%%'"

# Allow local customization in ~/.tmux.local.conf
if-shell "[[ -f ~/.tmux.conf.local ]]" 'source ~/.tmux.conf.local'
